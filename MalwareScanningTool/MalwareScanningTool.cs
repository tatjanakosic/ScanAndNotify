using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using System.ServiceModel;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Serialization;
using AuditManager;
using CertificateManager;
using Common;
using SecurityManager;

namespace MalwareScanningTool
{
    public class MalwareScanningTool :ChannelFactory<IIntursionDetectionSystem>,IIntursionDetectionSystem,IMalwareScanningTool
    {
        IIntursionDetectionSystem factory;
        //IMalwareScanningTool fac2;

        private string whitelistPath = @"..\..\Whitelist.xml";

        public MalwareScanningTool(NetTcpBinding binding,EndpointAddress address):base(binding,address) {
            string name = Formatter.ParseName(WindowsIdentity.GetCurrent().Name);
            name = name.ToLower();

            this.Credentials.ServiceCertificate.Authentication.CertificateValidationMode = System.ServiceModel.Security.X509CertificateValidationMode.ChainTrust;
            this.Credentials.ServiceCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;

            this.Credentials.ClientCertificate.Certificate = CertManager.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, name);
            factory = this.CreateChannel();

        }

        public MalwareScanningTool()
        {
        }


        //MST


        public void Connect()
        {
            Console.WriteLine("Client connected.");
        }

        public void Disconnect()
        {
            Console.WriteLine("Client disconnected.");
        }

        public string CreateConfigurationFile()
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            if (Thread.CurrentPrincipal.IsInRole("Create"))
            {
                if (!File.Exists(whitelistPath))
                {
                    using (FileStream stream = File.Create(whitelistPath))
                    {
                        Console.WriteLine("Whitelist created.");
                        return "Whitelist created.";
                        //Console.WriteLine(Path.GetFullPath(whitelistPath));
                    }
                }
                else
                {
                    Console.WriteLine("Failed to create a Whitelist. Whitelist already exists.");
                    return "Failed to create a Whitelist. Whitelist already exists.";


                }
            }
            else
            {
                Console.WriteLine("User unauthorized, need Create permission.");
                return "Unauthorized access !";
            }
        }

        public string DeleteConfigurationFile()
        {

            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            if (Thread.CurrentPrincipal.IsInRole("Delete"))
            {
                if (File.Exists(whitelistPath))
                {
                    File.Delete(whitelistPath);
                    Console.WriteLine("Whitelist deleted.");
                    return "Whitelist deleted.";


                }
                else
                {
                    Console.WriteLine("Cannot delete the Whitelist. It doesn't exist!");
                    return "Cannot delete the Whitelist. It doesn't exist!";
                }
            }
            else
            {
                Console.WriteLine("User unauthorized, need Delete permission.");
                return "Unauthorized access !";
            }
        }

        public string AddEntry(ConfigurationEntry entry)
        {

            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            if (Thread.CurrentPrincipal.IsInRole("Add"))
            {
                if (File.Exists(whitelistPath))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(List<ConfigurationEntry>));
                    List<ConfigurationEntry> entryList = new List<ConfigurationEntry>();

                    using (TextReader stream = new StreamReader(whitelistPath))
                    {
                        try
                        {
                            entryList = (List<ConfigurationEntry>)serializer.Deserialize(stream);
                        }
                        catch (Exception e)
                        {
                            //Avoiding the empty database exception.
                        }
                    }

                    if(entryList.Count > 0)
                    {
                        ConfigurationEntry lastEntry = entryList.Last();
                        entry.Id = lastEntry.Id + 1;
                    }
                    else
                    {
                        entry.Id = 0;
                    }
                    entryList.Add(entry);
                    using (TextWriter stream =new StreamWriter(whitelistPath))
                    {
                        serializer.Serialize(stream, entryList);
                        Console.WriteLine("Entry added to Whitelist");

                    }

                    return "Entry added to Whitelist.";

                }
                else
                {
                    Console.WriteLine("Cannot add Entry to the Whitelist. Whitelist doesn't exist.");
                    return "Cannot add Entry to the Whitelist. Whitelist doesn't exist.";
                }
            }
            else
            {
                Console.WriteLine("User unauthorized, need Add permission.");
                return "Unauthorized access !";
            }
        }

        public string ModifyEntry(ConfigurationEntry entry)
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            if (Thread.CurrentPrincipal.IsInRole("Modify"))
            {
                if (File.Exists(whitelistPath))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(List<ConfigurationEntry>));
                    List<ConfigurationEntry> entryList = new List<ConfigurationEntry>();
                    ConfigurationEntry entryToRemove = null;

                    using (TextReader stream =new StreamReader(whitelistPath))
                    {
                        try
                        {
                            entryList = (List<ConfigurationEntry>)serializer.Deserialize(stream);
                        }
                        catch (Exception e)
                        {
                            //Avoiding the empty database exception.
                        }
                    }

                    foreach (ConfigurationEntry existingEntry in entryList)
                    {
                        if (existingEntry.Id == entry.Id)
                        {
                            entryToRemove = existingEntry;
                            break;
                        }
                    }
                    if (entryToRemove != null)
                    {
                        entryList.Remove(entryToRemove);
                        try
                        {
                            entryList.Insert(entry.Id, entry);
                        }
                        catch
                        {
                            entryList.Add(entry);
                        }
                        using (TextWriter stream =new StreamWriter(whitelistPath))
                        {
                            serializer.Serialize(stream, entryList);
                            Console.WriteLine("Entry modified.");
                        }

                        return "Entry modified";

                    }
                    else
                    {
                        Console.WriteLine("Cannot modify Entry. Whitelist doesn't contain given Entry.");
                        return "Cannot modify Entry. Whitelist doesn't contain given Entry.";
                    }
                }
                else
                {
                    Console.WriteLine("Cannot add Entry to the Whitelist. Whitelist doesn't exist.");
                    return "Cannot add Entry to the Whitelist. Whitelist doesn't exist.";
                }
            }
            else
            {
                Console.WriteLine("User unauthorized, need Modify permission.");
                return "Unauthorized access !";
            }
        }

        public string DeleteEntry(int id)
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            if (Thread.CurrentPrincipal.IsInRole("Delete"))
            {
                if (File.Exists(whitelistPath))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(List<ConfigurationEntry>));
                    List<ConfigurationEntry> entryList = new List<ConfigurationEntry>();
                    ConfigurationEntry entryToRemove = null;

                    using (TextReader stream =new StreamReader(whitelistPath))
                    {
                        try
                        {
                            entryList = (List<ConfigurationEntry>)serializer.Deserialize(stream);
                        }
                        catch (Exception e)
                        {
                            //Avoiding the empty database exception.
                        }
                    }
                    foreach (ConfigurationEntry existingEntry in entryList)
                    {
                        if (existingEntry.Id == id)
                        {
                            entryToRemove = existingEntry;
                            break;
                        }
                    }
                    if (entryToRemove != null)
                    {
                        entryList.Remove(entryToRemove);

                        using (TextWriter stream = new StreamWriter(whitelistPath))
                        {
                            serializer.Serialize(stream, entryList);
                            Console.WriteLine("Entry deleted.");

                        }

                        return "Entry deleted.";

                    }
                    else
                    {
                        Console.WriteLine("Cannot delete Entry. Whitelist doesn't contain given Entry.");
                        return "Cannot delete Entry. Whitelist doesn't contain given Entry.";
                    }
                }
                else
                {
                    Console.WriteLine("Cannot delete Entry from the Whitelist. Whitelist doesn't exist.");
                    return "Cannot delete Entry from the Whitelist. Whitelist doesn't exist.";
                }
            }
            else
            {
                Console.WriteLine("User unauthorized, need Delete permission.");
                return "Unauthorized access !";
            }
        }

        public List<ConfigurationEntry> ReadConfigurationFile()
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);
            List<ConfigurationEntry> entryList = new List<ConfigurationEntry>();

            if (Thread.CurrentPrincipal.IsInRole("Read"))
            {
                if (File.Exists(whitelistPath) && (new FileInfo(whitelistPath).Length > 0))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(List<ConfigurationEntry>));

                    using (TextReader stream =new StreamReader(whitelistPath))
                    {
                        entryList = (List<ConfigurationEntry>)serializer.Deserialize(stream);
                    }
                }
                else
                {
                    Console.WriteLine("Cannot read Entries from the Whitelist. Whitelist doesn't exist.");
                }
            }
            else
            {
                Console.WriteLine("User unauthorized, need Read permission.");
            }
            return entryList;
        }



        //MST



        //IDS
        public void Natpis()
        {
            factory.Natpis();
        }

        public void SendMessage(string message, byte[] sign)
        {
            factory.SendMessage(message, sign);
        }

        public void UpdateIDS(Alarm alarm, string message, byte[] sign)
        {
            try
            {
                factory.UpdateIDS(alarm,message,sign);
            }
            catch (Exception e)
            {
                Console.WriteLine("[UpdateIDS] ERROR = {0}", e.Message);
            }
        }



        public string CheckFileIntegrity(string hash, byte[] sign)
        {

            try
            {
                return factory.CheckFileIntegrity(hash, sign);
            }
            catch (Exception e)
            {
                Console.WriteLine("[FileIntegrityIDS] ERROR = {0}", e.Message);
                return "";
            }


        }



    }
}
